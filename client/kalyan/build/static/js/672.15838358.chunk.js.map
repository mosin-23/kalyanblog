{"version":3,"file":"static/js/672.15838358.chunk.js","mappings":"4KAIAA,EAAAA,EAAMC,SAASC,QAAU,yCAEzB,MAmIA,EAnIsBC,KACpB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,KAC5CG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,IACzCO,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYV,EAAAA,EAAAA,WAAS,IAKrCW,EAAAA,EAAAA,YAAU,KACNjB,EAAAA,EACGkB,IAAI,UACJC,MAAMC,IACLf,EAASe,EAASC,MAClBC,QAAQC,IAAIH,EAASC,MACrBb,EAAiBY,EAASC,MAC1BX,GAAW,EAAM,IAElBc,OAAOC,IACNH,QAAQG,MAAM,yCAA0CA,GACxDf,GAAW,EAAM,GACjB,GACF,KACJO,EAAAA,EAAAA,YAAU,KACN,MAAMS,EAAQC,YAAW,IAAMX,GAAS,IAAQ,KAChD,MAAO,IAAMY,aAAaF,EAAM,GAC/B,IAGL,MAgBMG,EAAyBC,IAC7B,GAAiB,QAAbA,EACFtB,EAAiBJ,OACZ,CACL,MAAM2B,EAAW3B,EAAM4B,QAAQC,GAASA,EAAKH,WAAaA,IAC1DtB,EAAiBuB,EACnB,GAGF,OAAIhB,GAASN,GAETyB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mCAAkCC,UAC/CF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,OAMXC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAH,SAAA,EACAF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAEtBE,EAAAA,EAAAA,MAAA,OAAKH,UAAU,2EAA0EC,SAAA,EACvFF,EAAAA,EAAAA,KAAA,UACEM,QAASA,IAAMX,EAAsB,OACrCM,UAAU,mDAAkDC,SAC7D,SAGDF,EAAAA,EAAAA,KAAA,UACEM,QAASA,IAAMX,EAAsB,QACrCM,UAAU,gDAA+CC,SAC1D,UAGDF,EAAAA,EAAAA,KAAA,UACEM,QAASA,KAlDXxC,EAAAA,EACGkB,IAAI,gBACJC,MAAMC,IACLR,EAAeQ,EAASC,MACxBb,EAAiBY,EAASC,KAAK,IAEhCG,OAAOC,IACNH,QAAQG,MAAM,gDAAiDA,EAAM,GA2CvC,EAChCU,UAAU,+CAA8CC,SACzD,YAGDF,EAAAA,EAAAA,KAAA,UACEM,QAASA,IAAMX,EAAsB,aACrCM,UAAU,6CAA4CC,SACvD,eAGDF,EAAAA,EAAAA,KAAA,UACEM,QAASA,IAAMX,EAAsB,cACrCM,UAAU,qDAAoDC,SAC/D,qBAOCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,6EAA4EC,SACxF7B,EAAckC,KAAI,CAACR,EAAMS,KACxBJ,EAAAA,EAAAA,MAAA,OAAiBH,UAAU,0DAAyDC,SAAA,CAEjFH,EAAKU,OAAOC,OAAS,IACpBV,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA2BU,IAAKZ,EAAKU,OAAO,GAAIG,IAAKb,EAAKc,SAG3ET,EAAAA,EAAAA,MAAA,OAAKH,UAAU,YAAWC,SAAA,EAExBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mDAAkDC,SAAEH,EAAKc,SAGvET,EAAAA,EAAAA,MAAA,KAAGH,UAAU,6BAA4BC,SAAA,EAACF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,cAAkB,IAAEH,EAAKH,aAC3EI,EAAAA,EAAAA,KAAA,KAAGC,UAAU,sCAAqCC,SAAEH,EAAKe,eAGzDV,EAAAA,EAAAA,MAAA,KAAGH,UAAU,6BAA4BC,SAAA,CAAC,cAAY,IAAIa,KAAKhB,EAAKiB,WAAWC,4BAEjFjB,EAAAA,EAAAA,KAAA,UAAQC,UAAU,qDAAqDK,QAASA,KA/EvEY,QA+EsFnB,EAAKoB,IA9E5GxC,EAAS,WAADyC,OAAYF,GA8E4F,EAAEhB,SAAC,kBAjBnGM,SAuBb,C","sources":["Card.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Loader from './Loader';\r\naxios.defaults.baseURL = 'https://kalyanblog.onrender.com/kalyan';\r\n\r\nconst BlogComponent = () => {\r\n  const [blogs, setBlogs] = useState([]); // State to hold the fetched blog data\r\n  const [filteredBlogs, setFilteredBlogs] = useState([]); // State to hold filtered blog data\r\n  const [loading, setLoading] = useState(true); // Loading state\r\n  const [latestBlogs, setLatestBlogs] = useState([]); // State to hold the latest blog data\r\n  const navigate = useNavigate(); \r\n  const [delay, setDelay] = useState(true);\r\n\r\n  var blogid;\r\n\r\n   // Fetch all blogs from the API\r\nuseEffect(() => {\r\n    axios\r\n      .get('/blogs') // You only need to provide the path, baseURL is already set\r\n      .then((response) => {\r\n        setBlogs(response.data); // Set the fetched blog data\r\n        console.log(response.data)\r\n        setFilteredBlogs(response.data); // Set the filtered blogs to all blogs initially\r\n        setLoading(false); // Set loading to false after data is fetched\r\n      })\r\n      .catch((error) => {\r\n        console.error('There was an error fetching the blogs:', error);\r\n        setLoading(false); // Set loading to false in case of an error\r\n      });\r\n    },[]);\r\n  useEffect(() => {\r\n      const timer = setTimeout(() => setDelay(false), 2000); // Set delay to false after 2 seconds\r\n      return () => clearTimeout(timer); // Clean up the timer\r\n    }, []);\r\n\r\n  // Fetch the latest blogs from the API when \"Latest\" is clicked\r\n  const fetchLatestBlogs = () => {\r\n    axios\r\n      .get('/blogslatest') // Fetch latest blogs from the /blogslatest endpoint\r\n      .then((response) => {\r\n        setLatestBlogs(response.data); // Update the latest blogs\r\n        setFilteredBlogs(response.data); // Filter blogs by latest blogs\r\n      })\r\n      .catch((error) => {\r\n        console.error('There was an error fetching the latest blogs:', error);\r\n      });\r\n  };\r\n\r\n  const FetchPost = (blogId) => {\r\n    navigate(`/kalyan/${blogId}`); \r\n  };\r\n  // Function to filter blogs based on category\r\n  const filterBlogsByCategory = (category) => {\r\n    if (category === 'all') {\r\n      setFilteredBlogs(blogs); // If \"All\" is clicked, show all blogs\r\n    } else {\r\n      const filtered = blogs.filter((blog) => blog.category === category);\r\n      setFilteredBlogs(filtered); // Filter blogs by selected category\r\n    }\r\n  };\r\n\r\n  if (delay || loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center\">\r\n        <Loader/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"p-1\">\r\n  {/* Category Buttons */}\r\n  <div className=\"mb-6 grid grid-cols-3 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n    <button\r\n      onClick={() => filterBlogsByCategory('all')}\r\n      className=\"px-4 py-2 rounded-full bg-fuchsia-500 text-white\"\r\n    >\r\n      All\r\n    </button>\r\n    <button\r\n      onClick={() => filterBlogsByCategory('Tech')}\r\n      className=\"px-4 py-2 rounded-full bg-blue-500 text-white\"\r\n    >\r\n      Tech\r\n    </button>\r\n    <button\r\n      onClick={()=>{fetchLatestBlogs()}}// Fetch latest blogs when \"Latest\" is clicked\r\n      className=\"px-4 py-2 rounded-full bg-red-500 text-white\"\r\n    >\r\n      Latest\r\n    </button>\r\n    <button\r\n      onClick={() => filterBlogsByCategory('Lifestyle')}\r\n      className=\"px-4 py-2 rounded-full bg-black text-white\"\r\n    >\r\n      Lifestyle\r\n    </button>\r\n    <button\r\n      onClick={() => filterBlogsByCategory('Tech Hacks')}\r\n      className=\"px-15 py-2  rounded-full bg-emerald-500 text-white\"\r\n    >\r\n      Tech Hacks\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n      {/* Blog Cards */}\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3  gap-10 ml-8 justify-center\">\r\n        {filteredBlogs.map((blog, index) => (\r\n          <div key={index} className=\"max-w-xs rounded-lg overflow-hidden shadow-lg bg-white \">\r\n            {/* Blog Image */}\r\n            {blog.images.length > 0 && (\r\n              <img className=\"w-full h-48 object-cover\" src={blog.images[0]} alt={blog.title} />\r\n            )}\r\n\r\n            <div className=\"px-6 py-4\">\r\n              {/* Blog Title */}\r\n              <h2 className=\"text-xl font-semibold text-gray-800 font-serif  \">{blog.title}</h2>\r\n\r\n              {/* Blog Category and Description */}\r\n              <p className=\"text-gray-600 text-sm mt-2\"><strong>Category:</strong> {blog.category}</p>\r\n              <p className=\"text-gray-600 text-sm mt-2 truncate\">{blog.description}</p>\r\n\r\n              {/* Blog Created At */}\r\n              <p className=\"text-gray-500 text-xs mt-2\">Posted on: {new Date(blog.createdAt).toLocaleDateString()}</p>\r\n            </div>\r\n            <button className=\"px-4 px-2 p-2 m-2 rounded-full bg-black text-white\" onClick={()=>{FetchPost(blog._id)}}>\r\n              Read More..\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default BlogComponent;\r\n"],"names":["axios","defaults","baseURL","BlogComponent","blogs","setBlogs","useState","filteredBlogs","setFilteredBlogs","loading","setLoading","latestBlogs","setLatestBlogs","navigate","useNavigate","delay","setDelay","useEffect","get","then","response","data","console","log","catch","error","timer","setTimeout","clearTimeout","filterBlogsByCategory","category","filtered","filter","blog","_jsx","className","children","Loader","_jsxs","_Fragment","onClick","map","index","images","length","src","alt","title","description","Date","createdAt","toLocaleDateString","blogId","_id","concat"],"sourceRoot":""}